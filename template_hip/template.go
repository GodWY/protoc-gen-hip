package template_hip

import (
	"bytes"
	"strings"
	"text/template"
)

var tx = `
// Code generated by protoc-gen-go-hip. DO NOT EDIT.
// versions:{{.Version}}

package {{.PackageName}}


// This is a compile-time assertion to ensure that this generated file
// is compatible with the hip package it is being compiled against.
import (
	{{ range .Imports}}
       {{  . }}
	{{end}}
)
{{ range $v := .ServiceGroup}}
// generated http method
func register{{$v.ServiceName}}HttpHandler(srv *gin.Engine, h {{$v.ServiceName}}HttpHandler) {
	{{- if $v.MiddleWare -}}
		group := srv.Group("{{$v.GroupPath}}",{{$v.MiddleWare}})
	{{- else -}}
		group := srv.Group("{{$v.GroupPath}}")
	{{- end -}}
	
	{{range $x:= $v.Routers}}
		{{- if $x.MiddleWare }}
			group.{{$x.Method}}("{{$x.Path}}", h.{{$x.FuncName}}, {{$x.MiddleWare}})
		{{else}}
			group.{{$x.Method}}("{{$x.Path}}", h.{{$x.FuncName}})
		{{- end -}}
	{{- end -}}
}

var http{{$v.ServiceName}} {{$v.ServiceName}}

func Register{{$v.ServiceName}}HttpHandler(srv *gin.Engine, h {{$v.ServiceName}}) {
	tmp := new(x{{$v.ServiceName}})
	register{{$v.ServiceName}}HttpHandler(srv, tmp)
	http{{$v.ServiceName}} = h
}

{{ "// "}} {{$v.ServiceName}} {{ $v.Leading }}
type {{$v.ServiceName}} interface {
	{{- range $x:= $v.Routers}}
		{{ "//"}} {{$x.FuncName}} {{- $x.Leading }}
		{{$x.FuncName}}(ctx *gin.Context, in *{{$x.In}}) (out *{{$x.Out}}, err error)
	{{- end -}}
}

// generated http handle
type {{$v.ServiceName}}HttpHandler interface {
	{{range $x:= $v.Routers}}
		{{$x.FuncName}}(ctx *gin.Context)
	{{- end -}}
}

type x{{$v.ServiceName}} struct {}
{{range $x:= $v.Routers}}
func (x *x{{$v.ServiceName}}) {{$x.FuncName}}(ctx *gin.Context) {
	req := &{{$x.In}}{}
	if err := ctx.ShouldBind(req); err != nil {
		detail := "bind request error: "+err.Error()
		rt := gutil.RetFail(10000, detail)
		ctx.JSON(http.StatusOK, rt)
		return
	}
	rsp, err := http{{$v.ServiceName}}.{{$x.FuncName}}(ctx, req)
	if err != nil {
		ctx.JSON(http.StatusOK, gutil.RetError(err))
		return
	}
	ctx.JSON(http.StatusOK, gutil.RetSuccess("success", rsp))
}
{{end}}
{{end}}
`

func NewHttp() *HipTemplate {
	return &HipTemplate{}
}

type HipTemplate struct {
	// 工具版本
	Version string
	// 包名
	PackageName string
	// 导入的包名
	Imports      []string
	ServiceGroup []*ServiceGroups
}

func (h *HipTemplate) AddVersion(version string) {
	h.Version = version
}

func (h *HipTemplate) AddPackageName(name string) {
	h.PackageName = name
}

func (h *HipTemplate) AddImports(imports ...string) {
	h.Imports = append(h.Imports, imports...)
}

func (h *HipTemplate) AddGroups(sg *ServiceGroups) {
	h.ServiceGroup = append(h.ServiceGroup, sg)
}

type ServiceGroups struct {
	// ServiceName 组服务名字
	ServiceName string
	Routers     []*Routers
	// 组路由的路径
	GroupPath  string
	MiddleWare string
	// 服务说明注释
	Leading string
}

type Routers struct {
	// Path 路径
	Path string
	// 函数名称
	FuncName string
	// In 输入函数
	In string
	// 输出函数
	Out string
	// 请求方法
	Method     string
	MiddleWare string
	// 路由说明注释
	Leading string
}

func (g *ServiceGroups) AddGroupsRouter(rt *Routers) {
	g.Routers = append(g.Routers, rt)
}

func (g *ServiceGroups) AddGroupServiceName(name string) {
	g.ServiceName = name
}

func (g *ServiceGroups) AddGroupPath(path string) {
	g.GroupPath = path
}

// AddRouterPath 添加组路由
func (r *Routers) AddRouterPath(path string) {
	r.Path = path
}

// AddRouterFuncName 添加函数名称
func (r *Routers) AddRouterFuncName(name string) {
	r.FuncName = name
}

// AddRouterIn 添加函数入参
func (r *Routers) AddRouterIn(in string) {
	r.In = in
}

// AddRouterOut 添加函数入参
func (r *Routers) AddRouterOut(out string) {
	r.Out = out
}

// AddRouterMethod 添加方法
func (r *Routers) AddRouterMethod(method string) {
	r.Method = method
}

// Execute 执行template
func (t *HipTemplate) Execute() string {
	buf := new(bytes.Buffer)
	tmpl, err := template.New("http").Parse(strings.TrimSpace(tx))
	if err != nil {
		panic(err)
	}
	if err := tmpl.Execute(buf, t); err != nil {
		panic(err)
	}
	return strings.Trim(buf.String(), "\r\n")
}
