// Code generated by protoc-gen-go-hi. DO NOT EDIT.
// versions:

package greeter1

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/GodWY/hip/service"
)

// generated http method
func registerGreeterHttpHandler(srv service.Service, srvs GreeterHttpHandler, middleware ...gin.HandlerFunc) {
	group := srv.Router("greeter", middleware...)
	group.GET("/api/v1/hello", srvs.Hello)
	group.POST("/api/v1/stream", srvs.Stream)
}

var TGreeter Greeter

func RegisterGreeterHttpHandler(srv service.Service, srvs Greeter, middleware ...gin.HandlerFunc) {
	tmp := new(xxx_Greeter)
	registerGreeterHttpHandler(srv, tmp, middleware...)
	TGreeter = srvs
}

type Greeter interface {
	Hello(ctx *gin.Context, in *Request) (out *Response, err error)
	Stream(ctx *gin.Context, in *Request) (out *Response, err error)
}

// generated http handle
type GreeterHttpHandler interface {
	Hello(ctx *gin.Context)
	Stream(ctx *gin.Context)
}

type xxx_Greeter struct {
}

func (xx *xxx_Greeter) Hello(ctx *gin.Context) {
	req := &Request{}
	if ok := ctx.Bind(req); ok != nil {
		ctx.JSON(http.StatusOK, "bind error")
		return
	}
	rsp, err := TGreeter.Hello(ctx, req)
	if err != nil {
		ctx.JSON(http.StatusOK, err.Error())
		return
	}
	ctx.JSON(http.StatusOK, rsp)
}

func (xx *xxx_Greeter) Stream(ctx *gin.Context) {
	req := &Request{}
	if ok := ctx.Bind(req); ok != nil {
		ctx.JSON(http.StatusOK, "bind error")
		return
	}
	rsp, err := TGreeter.Stream(ctx, req)
	if err != nil {
		ctx.JSON(http.StatusOK, err.Error())
		return
	}
	ctx.JSON(http.StatusOK, rsp)
}
